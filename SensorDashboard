#!/usr/bin/env python3

# PyCosworth - a datastream logger and digital dashboard display interface for
# Magneti Marelli ECU modules as used on the Ford Sierra/Escort Cosworth as
# well as OBDII engine interface systems.
# Copyright (C) 2018  John Snowdon
# 
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

# Standard libraries
import multiprocessing
import time
import sys
import os

# Settings file
from libs import settings

# ECU data storage structure
from libs.EcuData import EcuData

# Any worker methods
from iomodules.SensorIO import SensorIO
from iomodules.ConsoleIO import ConsoleIO
from iomodules.GPIOButtonIO import GPIOButtonIO
from iomodules.GraphicsIO import GraphicsIO
from iomodules.DataLoggerIO import DataLoggerIO

# Start a new logger
from libs.newlog import newlog
if getattr(sys, 'frozen', False):
	__file__ = os.path.dirname(sys.executable)
logger = newlog(__file__)

def sensorWorker(transmitQueue, receiveQueue, controlQueue):
	""" Runs the sensor IO process to send and receive data from the ECU and any other sensors """
	SensorIO(transmitQueue, receiveQueue, controlQueue)
	
def consoleWorker(ecudata, controlQueue):
	""" Print sensor data to the terminal screen """
	ConsoleIO(ecudata, controlQueue)

def graphicsWorker(ecudata, controlQueue, actionQueue):
	""" Output sensor data to a Matrix Orbital text mode LCD """
	GraphicsIO(ecudata, controlQueue, actionQueue)

def gpioButtonWorker(actionQueue, stdin):
	""" Output sensor data to a Matrix Orbital text mode LCD """
	GPIOButtonIO(actionQueue, stdin)

def dataLoggerWorker(ecudata, controlQueue, actionQueue):
	""" Records incoming sensor data to disk """
	DataLoggerIO(ecudata, controlQueue, actionQueue)

#####################################################
#
# Add any user-defined worker functions here
# e.g.
#
# def myWorkerProcess(ecudata):
#	""" Do something else with the data """
#	myWorker(ecudata)
#
######################################################

if __name__ == '__main__':
	
	# Send and receive queues to pass data to/from the sensorIO worker
	sensorTransmitQueue = multiprocessing.Queue()
	sensorReceiveQueue = multiprocessing.Queue()
	
	
	# A new ecu data structure
	dataManager = multiprocessing.Manager()
	ecuDataDict = dataManager.dict()
	ecuStatusDict = dataManager.dict()
	ecuSensorDict = dataManager.dict()
	ecuCounter = multiprocessing.Value('d', 0)
	ecuSampleTime = multiprocessing.Value('d', 0.0)
	ecuErrors = multiprocessing.Array('i', range(settings.MAX_ERRORS))
	
	# Create a new ecudata class using the shared data structures from above
	ecuData = EcuData(ecuDataDict = ecuDataDict, 
		ecuSensorDict = ecuSensorDict,
		ecuCounter = ecuCounter, 
		ecuErrors = ecuErrors, 
		ecuSampleTime = ecuSampleTime, 
		ecuStatusDict = ecuStatusDict)
	#for sensor in settings.SENSORS:
	#	ecuData.setSensorData(sensor = sensor)
			
	# A list of all worker processes
	workers = []

	# A list of all control queues
	messageQueues = []
	datalogger_listeners = []
	
	# Start the Sensor IO process
	sensorControlQueue = multiprocessing.Queue()
	sensor_p = multiprocessing.Process(target=sensorWorker, args=(sensorTransmitQueue, sensorReceiveQueue, sensorControlQueue))
	sensor_p.start()
	workers.append(sensor_p)
	messageQueues.append(sensorControlQueue)
	datalogger_listeners.append(sensorControlQueue)
	
	###########################################################
	#
	# This block is where you add any workers that you also
	# want to have access to the sensor data returned from the ECU
	
	# Start the console IO process
	if settings.USE_CONSOLE:
		# The Console worker has a control queue that it listens for incoming control
		# messages on.
		consoleControlQueue = multiprocessing.Queue() # takes messages
		console_p = multiprocessing.Process(target=consoleWorker, args=(ecuData, consoleControlQueue,))
		console_p.start()
		workers.append(console_p)
		messageQueues.append(consoleControlQueue)
		datalogger_listeners.append(consoleControlQueue)
    
    # Start the process to capture Raspberry Pi GPIO button presses
	if settings.USE_BUTTONS:
		# The GPIO/Button worker has an action queue that it PUTS message onto,
		# but it DOESNT need to access the ecuData data structure.
		gpioActionQueue = multiprocessing.Queue() # passes messages and button presses back up
		my_stdin = sys.stdin.fileno()
		gpio_button_p = multiprocessing.Process(target=gpioButtonWorker, args=(gpioActionQueue, my_stdin))
		gpio_button_p.start()
		workers.append(gpio_button_p)
		
      
     # Start the OLED/SDL graphics process
	if settings.USE_GRAPHICS:
		# The OLED/SDL worker has a controle queue that it listens for incoming
		# control messages on.
		graphicsControlQueue = multiprocessing.Queue() # Takes messages
		masterActionQueue = multiprocessing.Queue() # Passes messages back up
		matrix_p = multiprocessing.Process(target=graphicsWorker, args=(ecuData, graphicsControlQueue, masterActionQueue))
		matrix_p.start()
		workers.append(matrix_p)
		messageQueues.append(graphicsControlQueue)
		datalogger_listeners.append(graphicsControlQueue)
	
	# Start the data logger process
	if settings.USE_DATALOGGER:
		# The logger worker has a controle queue that it listens for incoming
		# control messages on.
		loggerControlQueue = multiprocessing.Queue() # takes messages
		loggerActionQueue = multiprocessing.Queue() # passes messages back up
		logger_p = multiprocessing.Process(target=dataLoggerWorker, args=(ecuData, loggerControlQueue, loggerActionQueue))
		logger_p.start()
		workers.append(logger_p)
		messageQueues.append(loggerControlQueue)

	# e.g.
    #
    # if settings.MY_WORKER:
    # 	# Add any more display processes here
    #	myControlQueue = multiprocessing.Queue()
    # 	myworker_p = multiprocessing.Process(target=myWorkerProcess, args=(ecuData, myControlQueue,))
    # 	myworker_p.start()
    # 	workers.append(myworker_p)
    #	messageQueues.append(myControlQueue)
    
	# Start gathering data
	i = 0
	while True:
		
		if i == 10000:
			logger.debug("Still running [main process]")
			i = 0
		# Get latest data  
		# If the receive queue has any data back...
		#if sensorReceiveQueue.empty() == False:
		
		try:
			d = sensorReceiveQueue.get(block = True, timeout = 0.01)
			logger.debug("Got some sensor data")
			sensorDataType = d[0] # d0 = message_type
			sensorData = d[1] # d1 = sensorData dict
			loopCount = d[2] # d2 = sensor loop count
			timerData = d[3] # d4 = time taken for last data collection cycle
			
			# Check for type of the data
			if sensorDataType == settings.TYPE_ERROR:
				# We do special things for error messages
				logger.warn("Error message received")
				ecuData.addError(d[2])
			elif sensorDataType == settings.TYPE_DATA:
				# But for anything else we record it as a sensor value
				ecuData.setCounter(loopCount)
				ecuData.setSensorData(sensorData['sensor'])
				ecuData.setData(sensorData['sensor']['sensorId'], sensorData['value'], timerData, loopCount)
			elif sensorDataType == settings.TYPE_STATUS:
				# A status update - failed connection, enable/disable demo, ecu error, etc
				ecuData.setSensorStatus(statusData = sensorData)
			else:
				logger.warn("Unknown message type from SensorIO process")
			
		except Exception as e:
			pass
		
		# Check for any GPIO/keyboard button message
		if gpioActionQueue.empty() == False:
			logger.info("Message in the control queue")
			gpioMessage = gpioActionQueue.get()
			# Distribute the messages to all processes
			# so that each process (apart from gpio) can decide what to do with it
			for q in messageQueues:
				q.put(gpioMessage)
		
		# Message passed back up from the master display graphics class
		if masterActionQueue.empty() == False:
			logger.info("Message from master display")
			masterMessage = masterActionQueue.get()
			# Put it in all queues (apart from the graphics one)
			for q in messageQueues:
				q.put(masterMessage)
		
		# Message passed back up from the data logger class
		if loggerActionQueue.empty() == False:
			logger.info("Message from data logger")
			loggerMessage = loggerActionQueue.get()
			# Put it in all queues (apart from the graphics one)
			for q in datalogger_listeners:
				q.put(loggerMessage)
		
		i += 1
    
	# Wait for the workers to finish
	sensorTransmitQueue.close()
	sensorTransmitQueue.join_thread()
	sensorReceiveQueue.close()
	sensorReceiveQueue.join_thread()
	masterActionQueue.close()
	masterActionQueue.join_thread()
	loggerActionQueue.close()
	loggerActionQueue.join_thread()
	
	for q in messageQueues:
		q.close()
		q.join_thread()
	
	for w in workers:
		w.join()
